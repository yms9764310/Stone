<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- url 过滤器 -->
    <bean id="urlPathMatchingFilter" class="com.jc.filter.URLPathMatchingFilter"/>

    <!-- 配置 shiro 的过滤器工厂类，id- shiroFilter 要和我们在 web.xml 中配置的过滤器一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 调用我们配置的权限管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/admin_pro/layui/login.html"/>
<!--        &lt;!&ndash; 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 &ndash;&gt;-->
        <property name="unauthorizedUrl" value="/admin_pro/layui/unauthorized.html"/>
<!--        &lt;!&ndash; 退出 &ndash;&gt;-->
        <property name="filters">
            <util:map>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="url" value-ref="urlPathMatchingFilter"/>
            </util:map>
        </property>
        <!-- 权限配置 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon 表示此地址不需要任何权限即可访问 -->
                /login.do = anon
                /Customer/loadByCusId.do=anon
                /admin_pro/layui/login.html = anon
                /admin_pro/layui/assets/** = anon
                /admin_pro/layui/index.js = anon
                /admin_pro/layui/login.js = anon
                /admin_pro/layui/home.js = anon
                /admin_pro/layui/index.html= authc
                /admin_pro/layui/= authc
                /admin_pro/layui/unauthorized.html = anon
                <!-- 权限配置，只允许 admin 访问 -->
                /logout=logout
                <!-- 所有的请求(除去配置的静态资源请求或请求地址为 anon 的请求)都要通过过滤器url -->
                /** = url
            </value>
        </property>
    </bean>

<!--    &lt;!&ndash; 退出过滤器 &ndash;&gt;-->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/admin_pro/layui/login.html"/>
    </bean>


    <!-- 会话 ID 生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话 Cookie 模板 关闭浏览器立即失效 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
    <!--防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性-->
        <property name="httpOnly" value="true"/>
        <!-- 表示此cookie只是存储在浏览器内存里，只要关闭浏览器，此cookie就会消失-->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话 DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>

    </bean>

    <!-- 会话验证调度器，每 30 分钟执行一次验证 ，设定会话超时及保存 -->
    <bean name="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 全局会话超时时间（单位毫秒），默认 30 分钟 -->
        <property name="globalSessionTimeout" value="1800000"/>
<!--        删除无效session-->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="simpleCookie"/>
    </bean>

    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="shiro.sesssion"/>
        <property name="path" value="/"/>
    </bean>

    <!-- 相当于调用 SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

<!--    &lt;!&ndash; 密码匹配器 &ndash;&gt;-->
<!--    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
<!--        <property name="hashAlgorithmName" value="md5"/>-->
<!--        <property name="hashIterations" value="2"/>-->
<!--        <property name="storedCredentialsHexEncoded" value="true"/>-->
<!--    </bean>-->

    <!-- 声明 DatabaseRealm 的使用-->
    <bean id="databaseRealm" class="com.jc.realm.DatabaseRealm">
<!--        <property name="credentialsMatcher" ref="credentialsMatcher"/>-->
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="databaseRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 保证实现了 Shiro 内部 lifecycle 函数的 bean 执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>
